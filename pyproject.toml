[tool.poetry]
name = "jgutils"
version = "0.1.0"
description = "Generic utils to be shared between multiple projects"
authors = ["Jayme Gordon <jaymegordo@gmail.com>"]
license = "MIT"
packages = [{ include = "jgutils" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
numpy = ">=1.21.0,<2.0.0"
pandas = ">=2.0.0"
azure-storage-blob = { version = "^12.9.0", optional = true }
colored-traceback = { version = "^0.3.0", optional = true }
colorlog = { version = "^6.6.0", optional = true }
pygments = { git = "https://github.com/jaymegordo/pygments.git", optional = true }
tabulate = { version = "^0.8.9", optional = true }
lxml = { version = "^4.7.1", optional = true }
cryptography = "^38.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^6.2.4"
autopep8 = "^2.3.1"
ruff = "^0.7.4"
pre-commit = "^2.12.1"


[tool.poetry.extras]
azurestorage = ["azure-storage-blob"]
colorlogging = ["colored-traceback", "colorlog", "pygments"]
dev = ["pytest", "ruff", "autopep8", "pre-comit"]
terminaldf = ["tabulate", "lxml"]

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
reportWildcardImportFromLibrary = "none"
reportTypedDictNotRequiredAccess = "none"
reportUnboundVariable = "information"
reportMissingImports = "information"
reportGeneralTypeIssues = "information"
reportArgumentType = 'information'
reportAssignmentType = 'information'
reportAttributeAccessIssue = 'information'
reportReturnType = 'information'
reportCallIssue = 'information'
reportOperatorIssue = 'information'
reportRedeclaration = 'information'
reportOptionalIterable = "none"
reportOptionalMemberAccess = "information"
reportOptionalSubscript = "information"
reportPrivateImportUsage = "information"
reportUnusedExpression = "information"
reportInvalidStringEscapeSequence = "information"
reportSelfClsParameterName = "error"


[tool.ruff]
cache-dir = "~/.cache/ruff"
line-length = 120
exclude = ["working/*"]
target-version = "py311"

[tool.ruff.format]
quote-style = "single"
exclude = ["**/migrations/*"]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "B",
    "D",
    "N",
    "UP",
    "T20",
    "PTH",
    "PD",
    "PGH",
    "TCH",
    "ANN",
    "RET",
    "SIM",
    "Q",
    "C4",
    "TRY",
    "DJ",
]
ignore = [
    "E712",
    "E713",
    "E714",
    "E722",
    "E731",
    "F405",
    "F841",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D200",
    "D202",
    "D204",
    "D205",
    "D301",
    "D400",
    "D401",
    "D415",
    "ANN101",
    "ANN102",
    "ANN002",
    "ANN003",
    "RET503",
    "RET505",
    "PD901",
    "PD003",
    "PD004",
    "PLR5501",
    "PLR2004",
    "PGH003",
    "N817",
    "SIM201",
    "SIM108",
    "SIM118",
    "Q003",
    "C408",
    "TRY003",
    "TRY201",
    "TRY300",
    "TRY400",
    "DJ001",
    "UP039",
    "TCH003",  # standard library
]

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
exempt-modules = ["shelton.typing"]

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
force-single-line = true
